const LazyLoad={init(t,e,r){t.setAttribute("data-src",e),t.setAttribute("src",r)},observe(r){new IntersectionObserver(t=>{var e=r.dataset.src;t[0].isIntersecting&&e&&(r.src=e,r.removeAttribute("data-src"))}).observe(r)},listenerScroll(t){const e=LazyLoad.throttle(LazyLoad.load,300);LazyLoad.load(t),window.addEventListener("scroll",()=>{e(t)})},load(t){var e=document.documentElement.clientHeight,r=t.getBoundingClientRect().top,o=t.getBoundingClientRect().bottom,a=t.dataset.src;r-e<0&&0<o&&a&&(t.src=a,t.removeAttribute("data-src"))},throttle(o,a){let n,s;return function(...t){var e=Date.now();const r=this;s=s||e,clearTimeout(n),e-s>a?(s=e,o.apply(r,t),clearTimeout(n)):n=setTimeout(function(){s=Date.now(),n=null,o.apply(r,t)},a)}}};export default{bind(t,e){LazyLoad.init(t,e.value,defaultSrc)},inserted(t){IntersectionObserver?LazyLoad.observe(t):LazyLoad.listenerScroll(t)}};